/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

// アプリのデフォルト設定
const DEFAULT_SETTINGS = {
    bookTemplatePath: '',
    bookOutputFolder: '',
    blogTemplatePath: '',
    blogOutputFolder: '',
    anthropicApiKey: '',
    llmModel: 'claude-3-haiku-20240307'
};
// URLパターンの正規表現
const URL_PATTERN = /(https?:\/\/[^\s()<>]+(?:\([\w\d]+\)|([^!\s()<>.,;:'"[\]{}]|\/)))/g;
class BookCardCreator extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Loading Book Card Creator plugin v1.3.1');
            yield this.loadSettings();
            // スタイルシートを読み込む
            this.loadStyles();
            // コマンドパレットにコマンドを追加
            this.addCommand({
                id: 'create-book-card',
                name: 'Create Book Card from Amazon URL',
                callback: () => {
                    new BookUrlModal(this.app, this).open();
                }
            });
            // 技術ブログからカードを作成するコマンドを追加
            this.addCommand({
                id: 'create-tech-blog-card',
                name: 'Create Tech Blog Card from URL',
                callback: () => {
                    new TechBlogUrlModal(this.app, this).open();
                }
            });
            // カーソル下のURLからカードを作成するコマンドを追加
            this.addCommand({
                id: 'create-card-from-cursor',
                name: 'Create Card from URL under cursor',
                editorCallback: (editor, view) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        // カーソル位置のURLを取得
                        const url = this.getUrlUnderCursor(editor);
                        if (!url) {
                            new obsidian.Notice('No URL found under cursor');
                            return;
                        }
                        console.log(`Found URL under cursor: ${url}`);
                        // URLの種類に基づいて適切なモーダルを開く
                        this.openModalForUrl(url);
                    }
                    catch (error) {
                        console.error('Error processing URL under cursor:', error);
                        new obsidian.Notice(`Error processing URL: ${error instanceof Error ? error.message : String(error)}`);
                    }
                })
            });
            // 設定タブを追加
            this.addSettingTab(new BookCardCreatorSettingTab(this.app, this));
            console.log('Book Card Creator plugin loaded successfully');
        });
    }
    /**
     * URLの種類を検出する
     * @param url 検査対象のURL
     * @returns URLの種類 ('amazon' または 'blog')
     */
    detectUrlType(url) {
        // URLのバリデーション
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            // 完全なURLでない場合はブログとして扱う
            return 'blog';
        }
        // Amazonの複数のドメインパターンに対応
        const amazonDomains = [
            'amazon.com',
            'amazon.co.jp',
            'amazon.co.uk',
            'amazon.de',
            'amazon.fr',
            'amazon.it',
            'amazon.es',
            'amazon.ca',
            'amazon.in',
            'amazon.com.au',
            'amazon.com.br',
            'amazon.nl',
            'amazon.com.mx',
            'amzn.to', // 短縮URL
            'a.co' // 短縮URL
        ];
        try {
            // URLオブジェクトを作成してドメインを取得
            const urlObj = new URL(url);
            const domain = urlObj.hostname;
            // Amazonドメインかどうかをチェック
            for (const amazonDomain of amazonDomains) {
                if (domain.includes(amazonDomain)) {
                    return 'amazon';
                }
            }
        }
        catch (error) {
            // URLの解析に失敗した場合はログに記録
            console.error('Error parsing URL:', error);
        }
        // デフォルトはブログとして扱う
        return 'blog';
    }
    // URLに基づいて適切なモーダルを開き、自動処理を開始
    openModalForUrl(url) {
        let modal;
        // URLの種類を検出
        const urlType = this.detectUrlType(url);
        // 適切なモーダルを選択
        if (urlType === 'amazon') {
            // Amazonの場合は書籍用モーダル
            modal = new BookUrlModal(this.app, this);
        }
        else {
            // それ以外はブログ用モーダル
            modal = new TechBlogUrlModal(this.app, this);
        }
        // URLを設定してモーダルを表示
        modal.url = url;
        modal.open();
        // URLが入力済みなので自動的に処理を開始（少し遅延させる）
        setTimeout(() => {
            modal.startProcessing();
        }, 100);
    }
    // プラグインのスタイルシートを読み込む
    loadStyles() {
        // Obsidianのプラグインでスタイルシートを読み込む正しい方法
        // プラグインのマニフェストで指定されたstyles.cssが自動的に読み込まれる
        // このメソッドは将来の拡張のために残しておく
    }
    onunload() {
        console.log('Unloading Book Card Creator plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    /**
     * ファイルパスからTFileオブジェクトを取得（存在確認）
     * @param filePath ファイルパス
     * @returns TFileオブジェクトまたはnull
     */
    getTemplateFile(filePath) {
        const file = this.app.vault.getAbstractFileByPath(filePath);
        return file instanceof obsidian.TFile ? file : null;
    }
    /**
     * フォルダパスからTFolderオブジェクトを取得（存在確認）
     * @param folderPath フォルダパス
     * @returns TFolderオブジェクトまたはnull
     */
    getOutputFolder(folderPath) {
        const folder = this.app.vault.getAbstractFileByPath(folderPath);
        return folder instanceof obsidian.TFolder ? folder : null;
    }
    /**
     * ファイル名に使用できない文字を除去
     * @param title ファイル名に使いたいタイトル
     * @returns 安全なファイル名
     */
    sanitizeFilename(title) {
        return title.replace(/[\\/:*?"<>|]/g, '');
    }
    /**
     * カード情報からテンプレートを使用してノートを作成
     * @param cardInfo BookInfoかBlogInfoオブジェクト
     */
    createNoteFromTemplate(cardInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            let templatePath = '';
            let outputFolderPath = '';
            // BookInfoかBlogInfoかを判定してテンプレートと出力フォルダを選択
            if (this.isBookInfo(cardInfo)) {
                templatePath = this.settings.bookTemplatePath;
                outputFolderPath = this.settings.bookOutputFolder;
            }
            else if (this.isBlogInfo(cardInfo)) {
                templatePath = this.settings.blogTemplatePath;
                outputFolderPath = this.settings.blogOutputFolder;
            }
            // テンプレートファイルが存在するか確認
            const templateFile = this.getTemplateFile(templatePath);
            if (!templateFile) {
                new obsidian.Notice('Template file not found. Please check your settings.');
                return;
            }
            // 出力フォルダが存在するか確認
            const outputFolder = this.getOutputFolder(outputFolderPath);
            if (!outputFolder) {
                new obsidian.Notice('Output folder not found. Please check your settings.');
                return;
            }
            // テンプレートの内容を取得
            const templateContent = yield this.app.vault.read(templateFile);
            // テンプレートの内容を置換
            let newContent = templateContent;
            // BookInfoかBlogInfoかを判定して適切な置換を行う
            if (this.isBookInfo(cardInfo)) {
                newContent = this.applyBookTemplate(newContent, cardInfo);
            }
            else if (this.isBlogInfo(cardInfo)) {
                newContent = this.applyBlogTemplate(newContent, cardInfo);
            }
            // ファイル名（タイトルから不正な文字を除去）
            const fileName = `${this.sanitizeFilename(cardInfo.title)}.md`;
            const filePath = `${outputFolderPath}/${fileName}`;
            // 新しいノートを作成
            try {
                yield this.app.vault.create(filePath, newContent);
                new obsidian.Notice(`Card created: ${fileName}`);
                // 作成したノートを開く
                const newFile = this.app.vault.getAbstractFileByPath(filePath);
                if (newFile instanceof obsidian.TFile) {
                    this.app.workspace.getLeaf().openFile(newFile);
                }
            }
            catch (error) {
                new obsidian.Notice(`Error creating note: ${error instanceof Error ? error.message : String(error)}`);
            }
        });
    }
    /**
     * 書籍情報をテンプレートに適用
     */
    applyBookTemplate(template, book) {
        let result = template;
        // 基本情報を置換
        result = result.replace(/{{book-creator:title}}/g, book.title);
        result = result.replace(/{{book-creator:author}}/g, this.createMarkdownLink(book.author, `${book.author}`));
        result = result.replace(/{{book-creator:genre}}/g, book.genre);
        result = result.replace(/{{book-creator:summary}}/g, book.summary);
        // Amazon URLをMarkdownリンクとして挿入
        result = result.replace(/{{book-creator:amazon-link}}/g, this.createMarkdownLink(book.title, book.amazonUrl));
        // ジャンルURLのリンクも挿入（ジャンルURLがある場合のみ）
        if (book.genreUrl) {
            result = result.replace(/{{book-creator:genre-link}}/g, this.createMarkdownLink(book.genre, book.genreUrl));
        }
        else {
            result = result.replace(/{{book-creator:genre-link}}/g, book.genre);
        }
        return result;
    }
    /**
     * ブログ情報をテンプレートに適用
     */
    applyBlogTemplate(template, blog) {
        let result = template;
        // 基本情報を置換
        result = result.replace(/{{blog-creator:title}}/g, blog.title);
        result = result.replace(/{{blog-creator:summary}}/g, blog.summary);
        // Blog URLをMarkdownリンクとして挿入
        result = result.replace(/{{blog-creator:blog-link}}/g, this.createMarkdownLink(blog.title, blog.blogUrl));
        return result;
    }
    /**
     * 型ガード: 与えられたオブジェクトがBookInfo型かどうかを判定
     */
    isBookInfo(info) {
        return 'amazonUrl' in info;
    }
    /**
     * 型ガード: 与えられたオブジェクトがBlogInfo型かどうかを判定
     */
    isBlogInfo(info) {
        return 'blogUrl' in info;
    }
    /**
     * ブログURLから情報を取得
     */
    fetchBlogInfo(blogUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            // URLのバリデーション
            if (!blogUrl.includes('http')) {
                throw new Error('Invalid Blog URL');
            }
            try {
                // HTMLコンテンツを取得
                const htmlContent = yield this.fetchHtmlContent(blogUrl);
                // HTMLからメタデータを抽出
                const titleMatch = htmlContent.match(/<title[^>]*>([^<]+)<\/title>/) ||
                    htmlContent.match(/<h1[^>]*>([^<]+)<\/h1>/);
                // ページコンテンツを取得
                const bodyContent = this.extractMainContent(htmlContent);
                const cleanedContent = this.cleanHtml(bodyContent);
                // Anthropic APIで要約を生成
                let summary = 'No summary available.';
                if (cleanedContent && this.settings.anthropicApiKey) {
                    try {
                        summary = yield this.generateSummaryWithAnthropic(cleanedContent);
                    }
                    catch (error) {
                        console.error('Error generating summary:', error);
                        summary = 'Failed to generate summary: ' + (error instanceof Error ? error.message : String(error));
                    }
                }
                // データを整形して返す
                return {
                    title: titleMatch ? titleMatch[1].trim() : 'Unknown Title',
                    summary: summary,
                    blogUrl: blogUrl
                };
            }
            catch (error) {
                console.error('Error fetching blog information:', error);
                throw new Error('Failed to fetch blog information. Please check the URL and try again.');
            }
        });
    }
    /**
     * Amazonの本のURLから情報を取得
     */
    fetchBookInfo(amazonUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            // URLのバリデーション
            if (!amazonUrl.includes('amazon')) {
                throw new Error('Invalid Amazon URL');
            }
            try {
                // HTMLコンテンツを取得
                const htmlContent = yield this.fetchHtmlContent(amazonUrl);
                // HTMLからメタデータを抽出
                const titleMatch = htmlContent.match(/<span id="productTitle"[^>]*>([^<]+)<\/span>/);
                const authorMatch = htmlContent.match(/<a class="[^"]*" href="[^"]*\/e\/[^"]*">([^<]+)<\/a>/) ||
                    htmlContent.match(/id="bylineInfo"[^>]*>[\s\S]*?<span[^>]*>([^<]+)<\/span>/);
                // 商品説明を取得 (複数のパターンに対応、より詳細なコンテンツを取得)
                const summaryMatch = htmlContent.match(/<div id="bookDescription_feature_div"[^>]*>([\s\S]*?)<\/div>/) ||
                    htmlContent.match(/<div id="productDescription"[^>]*>([\s\S]*?)<\/div>/) ||
                    htmlContent.match(/<div class="a-expander-content[^"]*" id="[^"]*Description[^"]*"[^>]*>([\s\S]*?)<\/div>/) ||
                    htmlContent.match(/<noscript><div>([\s\S]*?)<\/div><\/noscript>/);
                // ジャンル情報とリンクを取得
                const { genre, genreUrl } = this.extractGenreInfo(htmlContent, amazonUrl);
                // データを整形して返す
                return {
                    title: titleMatch ? titleMatch[1].trim() : 'Unknown Title',
                    author: authorMatch ? authorMatch[1].trim() : 'Unknown Author',
                    genre: genre,
                    genreUrl: genreUrl,
                    summary: summaryMatch ? this.cleanHtml(summaryMatch[1]).trim() : 'No summary available.',
                    amazonUrl: amazonUrl
                };
            }
            catch (error) {
                console.error('Error fetching book information:', error);
                throw new Error('Failed to fetch book information. Please check the URL and try again.');
            }
        });
    }
    /**
     * HTMLコンテンツからジャンル情報を抽出
     */
    extractGenreInfo(htmlContent, baseUrl) {
        let genre = 'Fiction'; // デフォルトのジャンル
        let genreUrl = ''; // ジャンルのURL
        // パンくずリストからカテゴリ階層を取得
        const breadcrumbsMatch = htmlContent.match(/id="wayfinding-breadcrumbs_feature_div"[^>]*>([\s\S]*?)<\/div>/);
        if (breadcrumbsMatch) {
            const breadcrumbs = breadcrumbsMatch[1];
            // リンクを含むすべてのaタグを抽出
            const categoryLinkElements = breadcrumbs.match(/<a[^>]*href="([^"]*)"[^>]*>([^<]+)<\/a>/g);
            if (categoryLinkElements && categoryLinkElements.length > 0) {
                // 最後のカテゴリを使用
                const lastCategoryIndex = categoryLinkElements.length - 1;
                const lastCategoryElement = categoryLinkElements[lastCategoryIndex];
                // カテゴリ名を抽出
                const categoryTextMatch = lastCategoryElement.match(/>([^<]+)</);
                if (categoryTextMatch) {
                    genre = categoryTextMatch[1].trim();
                }
                // URLを抽出
                const hrefMatch = lastCategoryElement.match(/href="([^"]*)"/);
                if (hrefMatch) {
                    genreUrl = hrefMatch[1];
                    genreUrl = this.normalizeUrl(genreUrl, baseUrl);
                }
            }
        }
        // 他の方法でもジャンル情報を探す
        if (genre === 'Fiction' || genre === 'Kindle Store') {
            const genreMatch = htmlContent.match(/<a class="a-link-normal a-color-tertiary"[^>]*href="([^"]*)"[^>]*>([^<]+)<\/a>/);
            if (genreMatch && genreMatch[2] && genreMatch[2].trim() !== 'Kindle Store') {
                genre = genreMatch[2].trim();
                if (genreMatch[1]) {
                    genreUrl = genreMatch[1];
                    genreUrl = this.normalizeUrl(genreUrl, baseUrl);
                }
            }
        }
        return { genre, genreUrl };
    }
    /**
     * 相対URLを絶対URLに変換
     */
    normalizeUrl(url, baseUrl) {
        if (url.startsWith('/')) {
            const urlParts = baseUrl.match(/^(https?:\/\/[^\/]+)\//);
            if (urlParts) {
                return urlParts[1] + url;
            }
        }
        return url;
    }
    /**
     * タイムアウト付きのfetchを実行
     * @param url 取得するURL
     * @param timeoutMs タイムアウト時間（ミリ秒）
     * @returns Response オブジェクト
     */
    fetchWithTimeout(url, timeoutMs = 10000) {
        // AbortControllerを使ってタイムアウトを実装
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
        return fetch(url, { signal: controller.signal })
            .finally(() => clearTimeout(timeoutId));
    }
    /**
     * リトライ機能付きのfetch
     * @param url 取得するURL
     * @param options fetchオプション
     * @param retries リトライ回数
     * @param timeoutMs タイムアウト時間（ミリ秒）
     * @returns Response オブジェクト
     */
    fetchWithRetry(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, options = {}, retries = 3, timeoutMs = 10000) {
            let lastError = null;
            for (let i = 0; i < retries; i++) {
                try {
                    // 指数バックオフでリトライ間隔を増やす（最初のトライではウェイトなし）
                    if (i > 0) {
                        const waitTime = Math.min(1000 * Math.pow(2, i - 1), 10000);
                        yield new Promise(resolve => setTimeout(resolve, waitTime));
                    }
                    return yield this.fetchWithTimeout(url, timeoutMs);
                }
                catch (error) {
                    lastError = error instanceof Error ? error : new Error(String(error));
                    console.log(`Fetch attempt ${i + 1} failed: ${lastError.message}`);
                }
            }
            throw lastError || new Error('Failed to fetch after multiple retries');
        });
    }
    /**
     * URLからHTMLコンテンツを取得（複数のプロキシを試す）
     */
    fetchHtmlContent(url) {
        return __awaiter(this, void 0, void 0, function* () {
            // CORSの問題を回避するためにプロキシサービスを使用
            const proxyUrls = [
                `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`,
                `https://corsproxy.io/?${encodeURIComponent(url)}`,
                `https://cors-anywhere.herokuapp.com/${url}`
            ];
            let htmlContent = '';
            let proxyError = '';
            // プロキシを順番に試す
            for (const proxyUrl of proxyUrls) {
                try {
                    // 改良版のfetchを使用
                    const response = yield this.fetchWithRetry(proxyUrl, {}, 2, 15000);
                    if (!response.ok) {
                        proxyError = `Failed to fetch data: ${response.status}`;
                        continue;
                    }
                    // レスポンスタイプを確認
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        // JSONレスポンスの場合
                        const responseData = yield response.json();
                        if (responseData.contents) {
                            // allorigins形式のレスポンス
                            htmlContent = responseData.contents;
                        }
                    }
                    else {
                        // テキスト/HTMLレスポンスの場合
                        htmlContent = yield response.text();
                    }
                    // 成功したらループを抜ける
                    if (htmlContent)
                        break;
                }
                catch (err) {
                    proxyError = `Proxy error: ${err instanceof Error ? err.message : String(err)}`;
                    continue;
                }
            }
            if (!htmlContent) {
                throw new Error(`Failed to fetch content: ${proxyError}`);
            }
            return htmlContent;
        });
    }
    /**
     * メインコンテンツを抽出するヘルパーメソッド
     */
    extractMainContent(html) {
        // 一般的なコンテンツコンテナを探す
        const contentMatches = [
            html.match(/<article[^>]*>([\s\S]*?)<\/article>/),
            html.match(/<main[^>]*>([\s\S]*?)<\/main>/),
            html.match(/<div[^>]*?class="[^"]*?content[^"]*?"[^>]*>([\s\S]*?)<\/div>/i),
            html.match(/<div[^>]*?class="[^"]*?entry[^"]*?"[^>]*>([\s\S]*?)<\/div>/i),
            html.match(/<div[^>]*?class="[^"]*?post[^"]*?"[^>]*>([\s\S]*?)<\/div>/i)
        ];
        for (const match of contentMatches) {
            if (match && match[1]) {
                return match[1];
            }
        }
        // メインコンテンツが見つからない場合はbodyタグの中身を返す
        const bodyMatch = html.match(/<body[^>]*>([\s\S]*?)<\/body>/);
        return bodyMatch ? bodyMatch[1] : html;
    }
    /**
     * Anthropic APIで要約を生成するメソッド
     */
    generateSummaryWithAnthropic(content) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const apiKey = this.settings.anthropicApiKey;
            if (!apiKey) {
                // APIキーが設定されていない場合は適切なメッセージを返す
                return 'No summary available. Please set an Anthropic API key in settings to enable automatic summarization.';
            }
            const maxContentLength = 10000; // 長すぎるコンテンツは切り詰める
            const truncatedContent = content.length > maxContentLength ?
                content.substring(0, maxContentLength) + '...' : content;
            const prompt = `
Here's the content of a technical blog post. Please summarize it in a concise way, highlighting the main points, key technical concepts, and any important conclusions:

${truncatedContent}

Summary:`;
            try {
                const response = yield fetch('https://api.anthropic.com/v1/messages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'x-api-key': apiKey,
                        'anthropic-version': '2023-06-01'
                    },
                    body: JSON.stringify({
                        model: this.settings.llmModel,
                        max_tokens: 1000,
                        messages: [
                            { role: 'user', content: prompt }
                        ]
                    })
                });
                if (!response.ok) {
                    const errorData = yield response.json();
                    throw new Error(`Anthropic API Error: ${((_a = errorData.error) === null || _a === void 0 ? void 0 : _a.message) || response.statusText}`);
                }
                const data = yield response.json();
                return data.content[0].text || 'No summary available.';
            }
            catch (error) {
                console.error('Error calling Anthropic API:', error);
                // エラーメッセージをユーザーフレンドリーにする
                return `Unable to generate summary: ${error instanceof Error ? error.message : String(error)}. Check your API key and try again.`;
            }
        });
    }
    /**
     * HTMLタグを除去するヘルパーメソッド（改行を維持）
     */
    cleanHtml(html) {
        // <br>や</p>タグを改行に置換してから他のHTMLタグを削除
        return html
            .replace(/<br[^>]*>/gi, '\n')
            .replace(/<\/p>/gi, '\n\n')
            .replace(/<[^>]*>/g, ' ')
            .replace(/\s{2,}/g, ' ')
            .trim();
    }
    /**
     * Obsidianのタグやリンクに干渉する文字を除去し、Markdownリンクを作成
     */
    createMarkdownLink(title, url) {
        // Obsidianのタグやリンクに使われる特殊文字を除去
        const cleanTitle = title.replace(/[#\[\]|]/g, '').trim();
        // Markdown形式のリンクを作成
        return `[${cleanTitle}](${url})`;
    }
    /**
     * カーソル位置のURLを取得するヘルパーメソッド
     */
    getUrlUnderCursor(editor) {
        const cursorPos = editor.getCursor();
        const line = editor.getLine(cursorPos.line);
        // 現在の行でURLを検索
        let match;
        while ((match = URL_PATTERN.exec(line)) !== null) {
            const start = match.index;
            const end = start + match[0].length;
            // カーソルがURLの範囲内にある場合
            if (cursorPos.ch >= start && cursorPos.ch <= end) {
                return match[0];
            }
        }
        // 正規表現のインデックスをリセット
        URL_PATTERN.lastIndex = 0;
        // カーソルの直前または直後のURLも検索
        const matches = line.match(URL_PATTERN);
        if (matches) {
            // 最も近いURLを探す
            let closestUrl = null;
            let minDistance = Number.MAX_VALUE;
            for (const url of matches) {
                const start = line.indexOf(url);
                const end = start + url.length;
                const distanceToStart = Math.abs(cursorPos.ch - start);
                const distanceToEnd = Math.abs(cursorPos.ch - end);
                const minDist = Math.min(distanceToStart, distanceToEnd);
                if (minDist < minDistance) {
                    minDistance = minDist;
                    closestUrl = url;
                }
            }
            // カーソルから10文字以内にURLがある場合は取得
            if (minDistance <= 10) {
                return closestUrl;
            }
        }
        return null;
    }
}
/**
 * 書籍URL入力用のモーダル
 */
class BookUrlModal extends obsidian.Modal {
    constructor(app, plugin) {
        super(app);
        this.url = '';
        this.plugin = plugin;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: 'Enter Amazon Book URL' });
        // URL入力フィールド
        const urlInputContainer = contentEl.createDiv();
        this.urlInput = urlInputContainer.createEl('input', {
            attr: {
                type: 'text',
                placeholder: 'https://www.amazon.com/...'
            },
            cls: 'book-url-input'
        });
        this.urlInput.style.width = '100%';
        this.urlInput.style.marginBottom = '1em';
        this.urlInput.addEventListener('input', (e) => {
            this.url = e.target.value;
        });
        // 事前に設定されたURLがある場合は表示
        if (this.url) {
            this.urlInput.value = this.url;
        }
        // ローディングインジケータ（最初は非表示）
        this.loadingContainer = contentEl.createDiv({ cls: 'loading-container' });
        this.loadingContainer.style.display = 'none';
        this.loadingContainer.createDiv({ cls: 'loading-spinner' });
        this.loadingContainer.createDiv({ cls: 'loading-text', text: 'Fetching book information...' });
        // ボタンコンテナ
        this.buttonContainer = contentEl.createDiv();
        this.buttonContainer.style.display = 'flex';
        this.buttonContainer.style.justifyContent = 'flex-end';
        this.buttonContainer.style.gap = '0.5em';
        // キャンセルボタン
        const cancelButton = this.buttonContainer.createEl('button', { text: 'Cancel' });
        cancelButton.addEventListener('click', () => this.close());
        // 作成ボタン
        const createButton = this.buttonContainer.createEl('button', { text: 'Create', cls: 'mod-cta' });
        createButton.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {
            this.startProcessing();
        }));
        // 入力フィールドにフォーカス
        this.urlInput.focus();
    }
    // URLからカード作成処理を開始
    startProcessing() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.url) {
                new obsidian.Notice('Please enter a valid Amazon URL');
                return;
            }
            try {
                // ローディングインジケータを表示し、ボタンを非表示
                this.loadingContainer.style.display = 'flex';
                this.buttonContainer.style.display = 'none';
                // Notice表示も併用
                new obsidian.Notice('Fetching book information...');
                const bookInfo = yield this.plugin.fetchBookInfo(this.url);
                // 生成中のメッセージに更新
                const loadingText = this.loadingContainer.querySelector('.loading-text');
                if (loadingText) {
                    loadingText.innerText = 'Creating book card...';
                }
                yield this.plugin.createNoteFromTemplate(bookInfo);
                this.close();
            }
            catch (error) {
                // エラー時はローディングを非表示にしてボタンを再表示
                this.loadingContainer.style.display = 'none';
                this.buttonContainer.style.display = 'flex';
                new obsidian.Notice(`Error: ${error instanceof Error ? error.message : String(error)}`);
            }
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
/**
 * 設定タブの実装
 */
class BookCardCreatorSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        // プラグイン固有のクラスを追加
        containerEl.addClass('book-card-creator');
        containerEl.createEl('h2', { text: 'Book Card Creator Settings' });
        // セクションを明確に分けて表示
        this.renderAmazonBookSection(containerEl);
        this.renderTechBlogSection(containerEl);
        this.renderApiSection(containerEl);
        this.renderTemplateVariables(containerEl);
    }
    // Amazon Book Cardsの設定セクション
    renderAmazonBookSection(containerEl) {
        const amazonSection = containerEl.createDiv('settings-section');
        amazonSection.createEl('h3', { text: 'Amazon Book Cards Settings' });
        // 書籍用テンプレートファイルの設定
        new obsidian.Setting(amazonSection)
            .setName('Book template file')
            .setDesc('Select the template file for Amazon book cards')
            .addText(text => text
            .setPlaceholder('Example: templates/book-template.md')
            .setValue(this.plugin.settings.bookTemplatePath)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.bookTemplatePath = value;
            yield this.plugin.saveSettings();
        })))
            .addButton(button => button
            .setButtonText('Browse')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            // 既存のファイルを選択するための新しいモーダルを作成
            new FileSelectorModal(this.app, (file) => {
                this.plugin.settings.bookTemplatePath = file.path;
                this.plugin.saveSettings();
                this.display(); // 設定画面を更新
            }).open();
        })));
        // 書籍用出力フォルダの設定
        new obsidian.Setting(amazonSection)
            .setName('Book output folder')
            .setDesc('Select the folder where Amazon book cards will be created')
            .addText(text => text
            .setPlaceholder('Example: Books')
            .setValue(this.plugin.settings.bookOutputFolder)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.bookOutputFolder = value;
            yield this.plugin.saveSettings();
        })))
            .addButton(button => button
            .setButtonText('Browse')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            // フォルダを選択するための新しいモーダルを作成
            new FolderSelectorModal(this.app, (folder) => {
                this.plugin.settings.bookOutputFolder = folder.path;
                this.plugin.saveSettings();
                this.display(); // 設定画面を更新
            }).open();
        })));
    }
    // Tech Blog Cardsの設定セクション
    renderTechBlogSection(containerEl) {
        const blogSection = containerEl.createDiv('settings-section');
        blogSection.createEl('h3', { text: 'Tech Blog Cards Settings' });
        // ブログ用テンプレートファイルの設定
        new obsidian.Setting(blogSection)
            .setName('Blog template file')
            .setDesc('Select the template file for tech blog cards')
            .addText(text => text
            .setPlaceholder('Example: templates/blog-template.md')
            .setValue(this.plugin.settings.blogTemplatePath)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.blogTemplatePath = value;
            yield this.plugin.saveSettings();
        })))
            .addButton(button => button
            .setButtonText('Browse')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            // 既存のファイルを選択するための新しいモーダルを作成
            new FileSelectorModal(this.app, (file) => {
                this.plugin.settings.blogTemplatePath = file.path;
                this.plugin.saveSettings();
                this.display(); // 設定画面を更新
            }).open();
        })));
        // ブログ用出力フォルダの設定
        new obsidian.Setting(blogSection)
            .setName('Blog output folder')
            .setDesc('Select the folder where tech blog cards will be created')
            .addText(text => text
            .setPlaceholder('Example: TechBlogs')
            .setValue(this.plugin.settings.blogOutputFolder)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.blogOutputFolder = value;
            yield this.plugin.saveSettings();
        })))
            .addButton(button => button
            .setButtonText('Browse')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            // フォルダを選択するための新しいモーダルを作成
            new FolderSelectorModal(this.app, (folder) => {
                this.plugin.settings.blogOutputFolder = folder.path;
                this.plugin.saveSettings();
                this.display(); // 設定画面を更新
            }).open();
        })));
    }
    // API設定セクション
    renderApiSection(containerEl) {
        const apiSection = containerEl.createDiv('settings-section');
        apiSection.createEl('h3', { text: 'API Settings for Blog Summarization' });
        // Anthropic API Keyの設定
        new obsidian.Setting(apiSection)
            .setName('Anthropic API Key')
            .setDesc('Enter your Anthropic API key for tech blog summary generation')
            .addText(text => text
            .setPlaceholder('sk-ant-...')
            .setValue(this.plugin.settings.anthropicApiKey)
            .setDisabled(false)
            .inputEl.type = 'password')
            .addExtraButton(btn => btn
            .setIcon('reset')
            .setTooltip('Save API Key')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            const inputEl = apiSection.querySelector('input[type="password"]');
            this.plugin.settings.anthropicApiKey = inputEl.value;
            yield this.plugin.saveSettings();
            new obsidian.Notice('API Key saved');
        })));
        // LLMモデルの選択
        new obsidian.Setting(apiSection)
            .setName('Claude Model')
            .setDesc('Select which Claude model to use for blog summarization')
            .addDropdown(dropdown => dropdown
            .addOption('claude-3-haiku-20240307', 'Claude 3 Haiku (Fast)')
            .addOption('claude-3-sonnet-20240229', 'Claude 3 Sonnet (Balanced)')
            .addOption('claude-3-opus-20240229', 'Claude 3 Opus (Powerful)')
            .setValue(this.plugin.settings.llmModel)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.llmModel = value;
            yield this.plugin.saveSettings();
        })));
    }
    // テンプレート変数の説明セクション
    renderTemplateVariables(containerEl) {
        const variablesSection = containerEl.createDiv('settings-section');
        variablesSection.createEl('h3', { text: 'Template Variables' });
        const templateInfo = variablesSection.createEl('div');
        templateInfo.innerHTML = `
			<p>You can use the following variables in your templates:</p>
			<h4>For Amazon Book templates:</h4>
			<ul>
				<li><code>{{book-creator:title}}</code> - Book title</li>
				<li><code>{{book-creator:author}}</code> - Book author</li>
				<li><code>{{book-creator:genre}}</code> - Book genre</li>
				<li><code>{{book-creator:genre-link}}</code> - Markdown link to genre page</li>
				<li><code>{{book-creator:summary}}</code> - Book summary</li>
				<li><code>{{book-creator:amazon-link}}</code> - Markdown link to Amazon page</li>
			</ul>
			<h4>For Tech Blog templates:</h4>
			<ul>
				<li><code>{{blog-creator:title}}</code> - Blog title</li>
				<li><code>{{blog-creator:summary}}</code> - Blog summary</li>
				<li><code>{{blog-creator:blog-link}}</code> - Markdown link to blog page</li>
			</ul>
		`;
    }
}
// ファイル選択用のモーダル
class FileSelectorModal extends obsidian.Modal {
    constructor(app, onSelect) {
        super(app);
        this.onSelect = onSelect;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: 'Select Template File' });
        const fileList = contentEl.createDiv();
        fileList.style.maxHeight = '400px';
        fileList.style.overflow = 'auto';
        // マークダウンファイルの一覧を表示
        this.app.vault.getMarkdownFiles().forEach(file => {
            const fileItem = fileList.createEl('div', { cls: 'file-item' });
            fileItem.style.padding = '5px';
            fileItem.style.cursor = 'pointer';
            fileItem.style.borderBottom = '1px solid var(--background-modifier-border)';
            fileItem.innerHTML = `<span>${file.path}</span>`;
            fileItem.addEventListener('click', () => {
                this.onSelect(file);
                this.close();
            });
            fileItem.addEventListener('mouseenter', () => {
                fileItem.style.backgroundColor = 'var(--background-modifier-hover)';
            });
            fileItem.addEventListener('mouseleave', () => {
                fileItem.style.backgroundColor = '';
            });
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
/**
 * ブログURL入力用のモーダル
 */
class TechBlogUrlModal extends obsidian.Modal {
    constructor(app, plugin) {
        super(app);
        this.url = '';
        this.plugin = plugin;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: 'Enter Tech Blog URL' });
        // URL入力フィールド
        const urlInputContainer = contentEl.createDiv();
        this.urlInput = urlInputContainer.createEl('input', {
            attr: {
                type: 'text',
                placeholder: 'https://blog.example.com/...'
            },
            cls: 'blog-url-input'
        });
        this.urlInput.style.width = '100%';
        this.urlInput.style.marginBottom = '1em';
        this.urlInput.addEventListener('input', (e) => {
            this.url = e.target.value;
        });
        // 事前に設定されたURLがある場合は表示
        if (this.url) {
            this.urlInput.value = this.url;
        }
        // APIキーの警告（設定されていない場合）
        if (!this.plugin.settings.anthropicApiKey) {
            const warningDiv = contentEl.createDiv();
            warningDiv.style.color = 'var(--text-error)';
            warningDiv.style.marginBottom = '1em';
            warningDiv.createEl('p', { text: 'Warning: Anthropic API Key is not set. LLM summary will not be available.' });
        }
        // 選択されているモデルの情報を表示
        const modelInfo = contentEl.createDiv();
        modelInfo.style.marginBottom = '1em';
        let modelName = this.getModelDisplayName(this.plugin.settings.llmModel);
        modelInfo.createEl('p', { text: `Selected model: ${modelName}` });
        // ローディングインジケータ（最初は非表示）
        this.loadingContainer = contentEl.createDiv({ cls: 'loading-container' });
        this.loadingContainer.style.display = 'none';
        this.loadingContainer.createDiv({ cls: 'loading-spinner' });
        this.loadingContainer.createDiv({ cls: 'loading-text', text: 'Fetching blog information...' });
        // ボタンコンテナ
        this.buttonContainer = contentEl.createDiv();
        this.buttonContainer.style.display = 'flex';
        this.buttonContainer.style.justifyContent = 'flex-end';
        this.buttonContainer.style.gap = '0.5em';
        // キャンセルボタン
        const cancelButton = this.buttonContainer.createEl('button', { text: 'Cancel' });
        cancelButton.addEventListener('click', () => this.close());
        // 作成ボタン
        const createButton = this.buttonContainer.createEl('button', { text: 'Create', cls: 'mod-cta' });
        createButton.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {
            this.startProcessing();
        }));
        // 入力フィールドにフォーカス
        this.urlInput.focus();
    }
    // モデル名の表示用文字列を取得
    getModelDisplayName(modelId) {
        const modelMap = {
            'claude-3-haiku-20240307': 'Claude 3 Haiku (Fast)',
            'claude-3-sonnet-20240229': 'Claude 3 Sonnet (Balanced)',
            'claude-3-opus-20240229': 'Claude 3 Opus (Powerful)'
        };
        return modelMap[modelId] || 'Unknown';
    }
    // URLからカード作成処理を開始
    startProcessing() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.url) {
                new obsidian.Notice('Please enter a valid tech blog URL');
                return;
            }
            try {
                // ローディングインジケータを表示し、ボタンを非表示
                this.loadingContainer.style.display = 'flex';
                this.buttonContainer.style.display = 'none';
                // Notice表示も併用
                new obsidian.Notice('Fetching blog information...');
                const blogInfo = yield this.plugin.fetchBlogInfo(this.url);
                // 生成中のメッセージに更新
                const loadingText = this.loadingContainer.querySelector('.loading-text');
                if (loadingText) {
                    loadingText.innerText = 'Creating blog card...';
                }
                yield this.plugin.createNoteFromTemplate(blogInfo);
                this.close();
            }
            catch (error) {
                // エラー時はローディングを非表示にしてボタンを再表示
                this.loadingContainer.style.display = 'none';
                this.buttonContainer.style.display = 'flex';
                new obsidian.Notice(`Error: ${error instanceof Error ? error.message : String(error)}`);
            }
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
/**
 * フォルダ選択用のモーダル
 */
class FolderSelectorModal extends obsidian.Modal {
    constructor(app, onSelect) {
        super(app);
        this.onSelect = onSelect;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: 'Select Output Folder' });
        const folderList = contentEl.createDiv();
        folderList.style.maxHeight = '400px';
        folderList.style.overflow = 'auto';
        // フォルダの一覧を取得して表示
        const folders = [];
        this.getAllFolders(this.app.vault.getRoot(), folders);
        folders.forEach(folder => {
            const folderItem = folderList.createEl('div', { cls: 'folder-item' });
            folderItem.style.padding = '5px';
            folderItem.style.cursor = 'pointer';
            folderItem.style.borderBottom = '1px solid var(--background-modifier-border)';
            folderItem.innerHTML = `<span>${folder.path || '/'}</span>`;
            folderItem.addEventListener('click', () => {
                this.onSelect(folder);
                this.close();
            });
            folderItem.addEventListener('mouseenter', () => {
                folderItem.style.backgroundColor = 'var(--background-modifier-hover)';
            });
            folderItem.addEventListener('mouseleave', () => {
                folderItem.style.backgroundColor = '';
            });
        });
    }
    // フォルダを再帰的に取得
    getAllFolders(folder, folders) {
        folders.push(folder);
        for (const child of folder.children) {
            if (child instanceof obsidian.TFolder) {
                this.getAllFolders(child, folders);
            }
        }
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}

module.exports = BookCardCreator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
